name: GitHub PR Metrics Analysis

# Trigger options
trigger: none  # Manual trigger only
pr: none

# Schedule to run weekly
schedules:
- cron: "0 9 * * 1"  # Every Monday at 9 AM UTC
  displayName: Weekly PR Metrics Analysis
  branches:
    include:
    - main
  always: true

# Pipeline parameters
parameters:
  - name: githubOwner
    type: string
    displayName: 'GitHub Organization/Owner'
    default: ''
  
  - name: githubRepository
    type: string
    displayName: 'GitHub Repository (leave empty for all repos)'
    default: ''
  
  - name: daysBack
    type: number
    displayName: 'Days to look back'
    default: 30
    values:
    - 7
    - 14
    - 30
    - 60
    - 90
  
  - name: prState
    type: string
    displayName: 'PR State Filter'
    default: 'all'
    values:
    - all
    - open
    - closed
  
  - name: includeDetails
    type: boolean
    displayName: 'Include detailed PR information'
    default: true
  
  - name: includeDrafts
    type: boolean
    displayName: 'Include draft PRs'
    default: false
  
  - name: maxResults
    type: number
    displayName: 'Maximum PRs per repository'
    default: 100

# Variable groups for secrets and configuration
variables:
  - group: 'GitHub-Integration'  # Contains: githubToken, defaultOwner
  - name: reportPath
    value: '$(Build.ArtifactStagingDirectory)/github-pr-metrics.csv'
  - name: scriptPath
    value: 'scripts/Get-GitHubPRMetrics.ps1'

stages:
- stage: AnalyzePRMetrics
  displayName: 'Analyze GitHub PR Metrics'
  jobs:
  - job: GenerateMetrics
    displayName: 'Generate PR Metrics Report'
    pool:
      vmImage: 'windows-latest'
    
    steps:
    - checkout: self
      displayName: 'Checkout repository'
    
    # Validate parameters
    - task: PowerShell@2
      displayName: 'Validate Parameters'
      inputs:
        targetType: 'inline'
        script: |
          $owner = '${{ parameters.githubOwner }}'
          if (-not $owner) {
            $owner = '$(defaultOwner)'
          }
          
          if (-not $owner) {
            Write-Error "GitHub owner/organization must be specified either as parameter or in variable group"
            exit 1
          }
          
          Write-Host "✅ GitHub Owner: $owner"
          Write-Host "✅ Repository: $(if ('${{ parameters.githubRepository }}') { '${{ parameters.githubRepository }}' } else { 'All accessible repositories' })"
          Write-Host "✅ Days back: ${{ parameters.daysBack }}"
          Write-Host "✅ State filter: ${{ parameters.prState }}"
          Write-Host "✅ Include details: ${{ parameters.includeDetails }}"
          Write-Host "✅ Include drafts: ${{ parameters.includeDrafts }}"
          Write-Host "✅ Max results: ${{ parameters.maxResults }}"
          
          # Set variables for subsequent tasks
          Write-Host "##vso[task.setvariable variable=effectiveOwner]$owner"
        failOnStderr: true
    
    # Create output directory
    - task: PowerShell@2
      displayName: 'Prepare Output Directory'
      inputs:
        targetType: 'inline'
        script: |
          $outputDir = '$(Build.ArtifactStagingDirectory)'
          if (-not (Test-Path $outputDir)) {
            New-Item -Path $outputDir -ItemType Directory -Force
            Write-Host "Created output directory: $outputDir"
          }
          
          # Create scripts directory if it doesn't exist
          $scriptsDir = Join-Path '$(Build.SourcesDirectory)' 'scripts'
          if (-not (Test-Path $scriptsDir)) {
            New-Item -Path $scriptsDir -ItemType Directory -Force
            Write-Host "Created scripts directory: $scriptsDir"
          }
          
          Write-Host "Output directory ready: $outputDir"
          Write-Host "Scripts directory ready: $scriptsDir"
        failOnStderr: false
    
    # Build script arguments dynamically
    - task: PowerShell@2
      displayName: 'Build Script Arguments'
      inputs:
        targetType: 'inline'
        script: |
          # Base arguments
          $args = @(
            '-owner', '"$(effectiveOwner)"',
            '-repository', '"${{ parameters.githubRepository }}"',
            '-token', '"$(githubToken)"',
            '-days', '${{ parameters.daysBack }}',
            '-state', '"${{ parameters.prState }}"',
            '-outputPath', '"$(reportPath)"',
            '-maxResults', '${{ parameters.maxResults }}'
          )
          
          # Add conditional parameters based on pipeline parameters
          $includeDetails = [System.Convert]::ToBoolean('${{ parameters.includeDetails }}')
          $includeDrafts = [System.Convert]::ToBoolean('${{ parameters.includeDrafts }}')
          
          if ($includeDetails) {
            $args += '-includeDetails'
            Write-Host "✅ Adding -includeDetails parameter"
          }
          
          if ($includeDrafts) {
            $args += '-includeDrafts'
            Write-Host "✅ Adding -includeDrafts parameter"
          }
          
          # Add verbose logging
          $args += '-Verbose'
          
          # Join arguments into a single string
          $scriptArgs = $args -join ' '
          Write-Host "Final script arguments: $scriptArgs"
          
          # Set variable for next task
          Write-Host "##vso[task.setvariable variable=scriptArguments]$scriptArgs"
        failOnStderr: true
    
    # Run PR metrics analysis
    - task: PowerShell@2
      displayName: 'Analyze GitHub PR Metrics'
      inputs:
        filePath: $(scriptPath)
        arguments: $(scriptArguments)
        failOnStderr: false
        pwsh: true
      env:
        GITHUB_TOKEN: $(githubToken)
      timeoutInMinutes: 30
    
    # Generate summary report
    - task: PowerShell@2
      displayName: 'Generate Summary Report'
      inputs:
        targetType: 'inline'
        script: |
          $csvPath = '$(reportPath)'
          $summaryPath = '$(Build.ArtifactStagingDirectory)/pr-metrics-summary.md'
          
          if (Test-Path $csvPath) {
            Write-Host "📊 Processing CSV data from: $csvPath"
            $data = Import-Csv $csvPath
            
            $summary = @"
          # GitHub PR Metrics Analysis Report
          
          **Generated:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')  
          **Organization:** $(effectiveOwner)  
          **Repository:** $(if ('${{ parameters.githubRepository }}') { '${{ parameters.githubRepository }}' } else { 'All accessible repositories' })  
          **Analysis Period:** Last ${{ parameters.daysBack }} days  
          **State Filter:** ${{ parameters.prState }}  
          **Include Details:** ${{ parameters.includeDetails }}  
          **Include Drafts:** ${{ parameters.includeDrafts }}  
          
          ## Summary Statistics
          
          - **Total PRs Analyzed:** $($data.Count)
          - **Open PRs:** $($data | Where-Object State -eq 'open' | Measure-Object | Select-Object -ExpandProperty Count)
          - **Closed PRs:** $($data | Where-Object State -eq 'closed' | Measure-Object | Select-Object -ExpandProperty Count)
          - **Merged PRs:** $($data | Where-Object { $_.MergedAt -ne '' -and $_.MergedAt -ne $null } | Measure-Object | Select-Object -ExpandProperty Count)
          
          "@
          
          # Calculate time-based averages
          $closedPRs = $data | Where-Object { $_.State -eq 'closed' -and $_.TimeToClose -ne '' -and $_.TimeToClose -ne $null }
          if ($closedPRs.Count -gt 0) {
            $avgClose = ($closedPRs | Measure-Object -Property TimeToClose -Average).Average
            $summary += "`n- **Average Time to Close:** $([math]::Round($avgClose, 2)) hours ($([math]::Round($avgClose/24, 1)) days)"
          }
          
          $mergedPRs = $data | Where-Object { $_.MergedAt -ne '' -and $_.MergedAt -ne $null -and $_.TimeToMerge -ne '' -and $_.TimeToMerge -ne $null }
          if ($mergedPRs.Count -gt 0) {
            $avgMerge = ($mergedPRs | Measure-Object -Property TimeToMerge -Average).Average
            $summary += "`n- **Average Time to Merge:** $([math]::Round($avgMerge, 2)) hours ($([math]::Round($avgMerge/24, 1)) days)"
          }
          
          $reviewedPRs = $data | Where-Object { $_.TimeToFirstReview -ne '' -and $_.TimeToFirstReview -ne $null }
          if ($reviewedPRs.Count -gt 0) {
            $avgReview = ($reviewedPRs | Measure-Object -Property TimeToFirstReview -Average).Average
            $summary += "`n- **Average Time to First Review:** $([math]::Round($avgReview, 2)) hours ($([math]::Round($avgReview/24, 1)) days)"
          }
          
          $commentedPRs = $data | Where-Object { $_.TimeToFirstComment -ne '' -and $_.TimeToFirstComment -ne $null }
          if ($commentedPRs.Count -gt 0) {
            $avgComment = ($commentedPRs | Measure-Object -Property TimeToFirstComment -Average).Average
            $summary += "`n- **Average Time to First Comment:** $([math]::Round($avgComment, 2)) hours ($([math]::Round($avgComment/24, 1)) days)"
          }
          
          # Top repositories by PR count (only if analyzing multiple repos)
          $repoStats = $data | Group-Object Repository | Sort-Object Count -Descending | Select-Object -First 10
          if ($repoStats.Count -gt 1) {
            $summary += "`n`n## Top Repositories by PR Count`n"
            foreach ($repo in $repoStats) {
              $summary += "- **$($repo.Name):** $($repo.Count) PRs`n"
            }
          }
          
          # Top contributors
          $contributorStats = $data | Group-Object Author | Sort-Object Count -Descending | Select-Object -First 10
          if ($contributorStats.Count -gt 0) {
            $summary += "`n## Top Contributors`n"
            foreach ($contributor in $contributorStats) {
              $summary += "- **$($contributor.Name):** $($contributor.Count) PRs`n"
            }
          }
          
          # Longest running PRs
          $longestPRs = $closedPRs | Sort-Object TimeToClose -Descending | Select-Object -First 5
          if ($longestPRs.Count -gt 0) {
            $summary += "`n## Longest Running PRs (Closed)`n"
            foreach ($pr in $longestPRs) {
              $days = [math]::Round([double]$pr.TimeToClose / 24, 1)
              $summary += "- **#$($pr.PullNumber)** - $days days - [$($pr.Title)]($($pr.Url))`n"
            }
          }
          
          # Code change statistics
          $totalAdditions = ($data | Where-Object { $_.Additions -ne '' -and $_.Additions -ne $null } | Measure-Object -Property Additions -Sum).Sum
          $totalDeletions = ($data | Where-Object { $_.Deletions -ne '' -and $_.Deletions -ne $null } | Measure-Object -Property Deletions -Sum).Sum
          $totalFiles = ($data | Where-Object { $_.ChangedFiles -ne '' -and $_.ChangedFiles -ne $null } | Measure-Object -Property ChangedFiles -Sum).Sum
          
          if ($totalAdditions -or $totalDeletions -or $totalFiles) {
            $summary += "`n## Code Change Statistics`n"
            if ($totalAdditions) { $summary += "- **Total Lines Added:** $totalAdditions`n" }
            if ($totalDeletions) { $summary += "- **Total Lines Deleted:** $totalDeletions`n" }
            if ($totalFiles) { $summary += "- **Total Files Changed:** $totalFiles`n" }
          }
          
          # Save summary to file
          $summary | Out-File -FilePath $summaryPath -Encoding UTF8
          Write-Host "✅ Summary report generated: $summaryPath"
          
          # Display summary in pipeline logs
          Write-Host "##[section]📊 PR Metrics Summary"
          Write-Host $summary
          
          # Set pipeline variables for build summary
          Write-Host "##vso[task.setvariable variable=totalPRs]$($data.Count)"
          Write-Host "##vso[task.setvariable variable=openPRs]$($data | Where-Object State -eq 'open' | Measure-Object | Select-Object -ExpandProperty Count)"
          Write-Host "##vso[task.setvariable variable=closedPRs]$($closedPRs.Count)"
          Write-Host "##vso[task.setvariable variable=mergedPRs]$($mergedPRs.Count)"
          
          } else {
            Write-Warning "❌ No CSV file found at $csvPath"
            
            # Create empty summary for failed analysis
            $emptySummary = @"
          # GitHub PR Metrics Analysis Report
          
          **Generated:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')  
          **Organization:** $(effectiveOwner)  
          **Repository:** $(if ('${{ parameters.githubRepository }}') { '${{ parameters.githubRepository }}' } else { 'All accessible repositories' })  
          **Analysis Period:** Last ${{ parameters.daysBack }} days  
          **State Filter:** ${{ parameters.prState }}  
          
          ## ⚠️ Analysis Results
          
          No pull requests found matching the specified criteria.
          
          This could be due to:
          - No PRs in the specified time period
          - Repository access issues
          - Invalid repository name
          - API rate limiting
          
          Please check the pipeline logs for more details.
          "@
          
          $emptySummary | Out-File -FilePath $summaryPath -Encoding UTF8
          Write-Host "##vso[task.setvariable variable=totalPRs]0"
          }
        failOnStderr: false
        pwsh: true
    
    # Publish artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish PR Metrics Report'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'github-pr-metrics'
        publishLocation: 'Container'
      condition: always()
    
    # Update build summary
    - task: PowerShell@2
      displayName: 'Update Build Summary'
      inputs:
        targetType: 'inline'
        script: |
          $buildSummary = @"
          ## 📊 GitHub PR Metrics Analysis Complete
          
          - **Total PRs Analyzed:** $env:totalPRs
          - **Open PRs:** $env:openPRs  
          - **Closed PRs:** $env:closedPRs
          - **Merged PRs:** $env:mergedPRs
          
          📁 **Artifacts Published:**
          - CSV Report: github-pr-metrics.csv
          - Summary Report: pr-metrics-summary.md
          
          🔗 **Download artifacts from the build summary page**
          "@

          $summaryPath = "$(Build.ArtifactStagingDirectory)/pr-metrics-build-summary.md"
          $buildSummary | Out-File -FilePath $summaryPath -Encoding UTF8

          Write-Host "##vso[task.uploadsummary]$summaryPath"
          Write-Host "✅ Build summary updated"
        failOnStderr: false
      condition: always()
    
    # Send notification (optional)
    - task: PowerShell@2
      displayName: 'Send Notification'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'Manual'))
      inputs:
        targetType: 'inline'
        script: |
          # Teams webhook notification (optional)
          $webhookUrl = '$(teamsWebhookUrl)'  # Add to variable group if needed
          
          if ($webhookUrl -and $webhookUrl -ne '') {
            Write-Host "📢 Sending Teams notification..."
            
            $message = @{
              "@type" = "MessageCard"
              "@context" = "https://schema.org/extensions"
              "summary" = "GitHub PR Metrics Analysis Complete"
              "themeColor" = "0078D4"
              "title" = "🚀 GitHub PR Metrics Analysis Complete"
              "text" = "Analysis completed for **$(effectiveOwner)** with $(totalPRs) PRs analyzed."
              "sections" = @(
                @{
                  "activityTitle" = "Analysis Summary"
                  "facts" = @(
                    @{ "name" = "Organization"; "value" = "$(effectiveOwner)" },
                    @{ "name" = "Repository"; "value" = "$(if ('${{ parameters.githubRepository }}') { '${{ parameters.githubRepository }}' } else { 'All repositories' })" },
                    @{ "name" = "Total PRs"; "value" = "$(totalPRs)" },
                    @{ "name" = "Open PRs"; "value" = "$(openPRs)" },
                    @{ "name" = "Closed PRs"; "value" = "$(closedPRs)" },
                    @{ "name" = "Merged PRs"; "value" = "$(mergedPRs)" }
                  )
                }
              )
              "potentialAction" = @(
                @{
                  "@type" = "OpenUri"
                  "name" = "View Build Results"
                  "targets" = @(
                    @{ "os" = "default"; "uri" = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)" }
                  )
                }
              )
            } | ConvertTo-Json -Depth 10
            
            try {
              Invoke-RestMethod -Uri $webhookUrl -Method Post -Body $message -ContentType 'application/json'
              Write-Host "✅ Teams notification sent successfully"
            } catch {
              Write-Warning "⚠️ Failed to send Teams notification: $_"
            }
          } else {
            Write-Host "ℹ️ No Teams webhook URL configured - skipping notification"
          }
        failOnStderr: false

  # Optional: Deploy report to Azure Storage
  - job: DeployReport
    displayName: 'Deploy Report to Azure Storage'
    dependsOn: GenerateMetrics
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    pool:
      vmImage: 'ubuntu-latest'
    
    variables:
      storageEnabled: $[ne(variables['storageAccountName'], '')]
    
    steps:
    - download: current
      artifact: 'github-pr-metrics'
      displayName: 'Download PR Metrics Artifacts'
    
    - task: PowerShell@2
      displayName: 'Check Storage Configuration'
      inputs:
        targetType: 'inline'
        script: |
          $storageAccount = '$(storageAccountName)'
          $serviceConnection = '$(azureServiceConnection)'
          
          if (-not $storageAccount -or $storageAccount -eq '') {
            Write-Host "##vso[task.logissue type=warning]Storage account name not configured - skipping deployment"
            Write-Host "##vso[task.setvariable variable=skipDeploy]true"
          } elseif (-not $serviceConnection -or $serviceConnection -eq '') {
            Write-Host "##vso[task.logissue type=warning]Azure service connection not configured - skipping deployment"
            Write-Host "##vso[task.setvariable variable=skipDeploy]true"
          } else {
            Write-Host "✅ Storage configuration valid"
            Write-Host "##vso[task.setvariable variable=skipDeploy]false"
          }
        failOnStderr: false
    
    - task: AzureFileCopy@4
      displayName: 'Upload Reports to Azure Storage'
      condition: ne(variables['skipDeploy'], 'true')
      inputs:
        SourcePath: '$(Pipeline.Workspace)/github-pr-metrics/*'
        azureSubscription: '$(azureServiceConnection)'
        Destination: 'AzureBlob'
        storage: '$(storageAccountName)'
        ContainerName: 'reports'
        BlobPrefix: 'github-pr-metrics/$(Build.BuildNumber)/'
    
    - task: PowerShell@2
      displayName: 'Generate Storage URLs'
      condition: ne(variables['skipDeploy'], 'true')
      inputs:
        targetType: 'inline'
        script: |
          $storageAccount = '$(storageAccountName)'
          $buildNumber = '$(Build.BuildNumber)'
          
          $csvUrl = "https://$storageAccount.blob.core.windows.net/reports/github-pr-metrics/$buildNumber/github-pr-metrics.csv"
          $summaryUrl = "https://$storageAccount.blob.core.windows.net/reports/github-pr-metrics/$buildNumber/pr-metrics-summary.md"
          
          Write-Host "📊 Reports uploaded to Azure Storage:"
          Write-Host "CSV Report: $csvUrl"
          Write-Host "Summary Report: $summaryUrl"
          
          Write-Host "##vso[task.setvariable variable=csvReportUrl;isOutput=true]$csvUrl"
          Write-Host "##vso[task.setvariable variable=summaryReportUrl;isOutput=true]$summaryUrl"
        failOnStderr: false