name: GitHub PR Metrics Analysis

# Trigger options
trigger: none  # Manual trigger only
pr: none

# Schedule to run weekly
schedules:
- cron: "0 9 * * 1"  # Every Monday at 9 AM UTC
  displayName: Weekly PR Metrics Analysis
  branches:
    include:
    - main
  always: true

# Pipeline parameters
parameters:
  - name: githubOwner
    type: string
    displayName: 'GitHub Organization/Owner'
    default: ''
  
  - name: githubRepository
    type: string
    displayName: 'GitHub Repository (leave empty for all repos)'
    default: ''
  
  - name: daysBack
    type: number
    displayName: 'Days to look back'
    default: 30
    values:
    - 7
    - 14
    - 30
    - 60
    - 90
  
  - name: prState
    type: string
    displayName: 'PR State Filter'
    default: 'all'
    values:
    - all
    - open
    - closed
  
  - name: includeDetails
    type: boolean
    displayName: 'Include detailed PR information'
    default: true
  
  - name: includeDrafts
    type: boolean
    displayName: 'Include draft PRs'
    default: false
  
  - name: maxResults
    type: number
    displayName: 'Maximum PRs per repository'
    default: 100

# Variable groups for secrets and configuration
variables:
  - group: 'GitHub-Integration'  # Contains: githubToken, defaultOwner
  - name: reportPath
    value: '$(Build.ArtifactStagingDirectory)/github-pr-metrics.csv'
  - name: scriptPath
    value: 'scripts/Get-GitHubPRMetrics.ps1'

stages:
- stage: AnalyzePRMetrics
  displayName: 'Analyze GitHub PR Metrics'
  jobs:
  - job: GenerateMetrics
    displayName: 'Generate PR Metrics Report'
    pool:
      vmImage: 'windows-latest'
    
    steps:
    - checkout: self
      displayName: 'Checkout repository'
    
    # Validate parameters
    - task: PowerShell@2
      displayName: 'Validate Parameters'
      inputs:
        targetType: 'inline'
        script: |
          $owner = '${{ parameters.githubOwner }}'
          if (-not $owner) {
            $owner = '$(defaultOwner)'
          }
          
          if (-not $owner) {
            Write-Error "GitHub owner/organization must be specified either as parameter or in variable group"
            exit 1
          }
          
          Write-Host "✅ GitHub Owner: $owner"
          Write-Host "✅ Repository: $(if ('${{ parameters.githubRepository }}') { '${{ parameters.githubRepository }}' } else { 'All accessible repositories' })"
          Write-Host "✅ Days back: ${{ parameters.daysBack }}"
          Write-Host "✅ State filter: ${{ parameters.prState }}"
          
          # Set variables for subsequent tasks
          Write-Host "##vso[task.setvariable variable=effectiveOwner]$owner"
        failOnStderr: true
    
    # Create output directory
    - task: PowerShell@2
      displayName: 'Prepare Output Directory'
      inputs:
        targetType: 'inline'
        script: |
          $outputDir = '$(Build.ArtifactStagingDirectory)'
          if (-not (Test-Path $outputDir)) {
            New-Item -Path $outputDir -ItemType Directory -Force
            Write-Host "Created output directory: $outputDir"
          }
          
          # Create scripts directory if it doesn't exist
          $scriptsDir = Join-Path '$(Build.SourcesDirectory)' 'scripts'
          if (-not (Test-Path $scriptsDir)) {
            New-Item -Path $scriptsDir -ItemType Directory -Force
            Write-Host "Created scripts directory: $scriptsDir"
          }
        failOnStderr: false
    
    # Run PR metrics analysis
    - task: PowerShell@2
      displayName: 'Analyze GitHub PR Metrics'
      inputs:
        filePath: $(scriptPath)
        arguments: >
          -owner "$(effectiveOwner)"
          -repository "${{ parameters.githubRepository }}"
          -token "$(githubToken)"
          -days ${{ parameters.daysBack }}
          -state "${{ parameters.prState }}"
          -outputPath "$(reportPath)"
          -maxResults ${{ parameters.maxResults }}
          ${{ eq(parameters.includeDetails, true) && '-includeDetails' || '' }}
          ${{ eq(parameters.includeDrafts, true) && '-includeDrafts' || '' }}
          -Verbose
        failOnStderr: false
        pwsh: true
      env:
        GITHUB_TOKEN: $(githubToken)
      timeoutInMinutes: 30
    
    # Generate summary report
    - task: PowerShell@2
      displayName: 'Generate Summary Report'
      inputs:
        targetType: 'inline'
        script: |
          $csvPath = '$(reportPath)'
          $summaryPath = '$(Build.ArtifactStagingDirectory)/pr-metrics-summary.md'
          
          if (Test-Path $csvPath) {
            $data = Import-Csv $csvPath
            
            $summary = @"
          # GitHub PR Metrics Analysis Report
          
          **Generated:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
          **Organization:** $(effectiveOwner)
          **Repository:** $(if ('${{ parameters.githubRepository }}') { '${{ parameters.githubRepository }}' } else { 'All accessible repositories' })
          **Analysis Period:** Last ${{ parameters.daysBack }} days
          **State Filter:** ${{ parameters.prState }}
          
          ## Summary Statistics
          
          - **Total PRs Analyzed:** $($data.Count)
          - **Open PRs:** $($data | Where-Object State -eq 'open' | Measure-Object | Select-Object -ExpandProperty Count)
          - **Closed PRs:** $($data | Where-Object State -eq 'closed' | Measure-Object | Select-Object -ExpandProperty Count)
          - **Merged PRs:** $($data | Where-Object MergedAt -ne '' | Measure-Object | Select-Object -ExpandProperty Count)
          
          "@
          
          # Calculate averages
          $closedPRs = $data | Where-Object { $_.State -eq 'closed' -and $_.TimeToClose -ne '' }
          if ($closedPRs.Count -gt 0) {
            $avgClose = ($closedPRs | Measure-Object -Property TimeToClose -Average).Average
            $summary += "`n- **Average Time to Close:** $([math]::Round($avgClose, 2)) hours"
          }
          
          $mergedPRs = $data | Where-Object { $_.MergedAt -ne '' -and $_.TimeToMerge -ne '' }
          if ($mergedPRs.Count -gt 0) {
            $avgMerge = ($mergedPRs | Measure-Object -Property TimeToMerge -Average).Average
            $summary += "`n- **Average Time to Merge:** $([math]::Round($avgMerge, 2)) hours"
          }
          
          $reviewedPRs = $data | Where-Object { $_.TimeToFirstReview -ne '' }
          if ($reviewedPRs.Count -gt 0) {
            $avgReview = ($reviewedPRs | Measure-Object -Property TimeToFirstReview -Average).Average
            $summary += "`n- **Average Time to First Review:** $([math]::Round($avgReview, 2)) hours"
          }
          
          # Top repositories by PR count
          $repoStats = $data | Group-Object Repository | Sort-Object Count -Descending | Select-Object -First 10
          if ($repoStats.Count -gt 1) {
            $summary += "`n`n## Top Repositories by PR Count`n"
            foreach ($repo in $repoStats) {
              $summary += "- **$($repo.Name):** $($repo.Count) PRs`n"
            }
          }
          
          # Top contributors
          $contributorStats = $data | Group-Object Author | Sort-Object Count -Descending | Select-Object -First 10
          if ($contributorStats.Count -gt 0) {
            $summary += "`n## Top Contributors`n"
            foreach ($contributor in $contributorStats) {
              $summary += "- **$($contributor.Name):** $($contributor.Count) PRs`n"
            }
          }
          
          $summary | Out-File -FilePath $summaryPath -Encoding UTF8
          Write-Host "Summary report generated: $summaryPath"
          
          # Display summary in pipeline logs
          Write-Host "##[section]PR Metrics Summary"
          Write-Host $summary
          } else {
            Write-Warning "No CSV file found at $csvPath"
          }
        failOnStderr: false
        pwsh: true
    
    # Publish artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish PR Metrics Report'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'github-pr-metrics'
        publishLocation: 'Container'
      condition: always()
    
    # Send notification (optional)
    - task: PowerShell@2
      displayName: 'Send Notification'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'Manual'))
      inputs:
        targetType: 'inline'
        script: |
          # Add your notification logic here
          # Examples: Teams webhook, Slack, email, etc.
          
          $webhookUrl = '$(teamsWebhookUrl)'  # Add to variable group if needed
          if ($webhookUrl) {
            $message = @{
              text = "GitHub PR Metrics analysis completed for $(effectiveOwner). Check the build artifacts for detailed report."
              title = "PR Metrics Analysis Complete"
            } | ConvertTo-Json
            
            try {
              Invoke-RestMethod -Uri $webhookUrl -Method Post -Body $message -ContentType 'application/json'
              Write-Host "Notification sent successfully"
            } catch {
              Write-Warning "Failed to send notification: $_"
            }
          }
        failOnStderr: false

  # Optional: Deploy report to web location
  - job: DeployReport
    displayName: 'Deploy Report to Web'
    dependsOn: GenerateMetrics
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - download: current
      artifact: 'github-pr-metrics'
      displayName: 'Download artifacts'
    
    - task: AzureFileCopy@4
      displayName: 'Upload to Azure Storage'
      inputs:
        SourcePath: '$(Pipeline.Workspace)/github-pr-metrics/*'
        azureSubscription: '$(azureServiceConnection)'  # Add to variable group
        Destination: 'AzureBlob'
        storage: '$(storageAccountName)'  # Add to variable group
        ContainerName: 'reports'
        BlobPrefix: 'github-pr-metrics/$(Build.BuildNumber)/'
      condition: and(succeeded(), ne(variables['storageAccountName'], ''))
